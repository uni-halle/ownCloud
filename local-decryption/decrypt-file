#!/bin/bash

function printErr() {
	echo "$@" >&2
}

function decryptFile() {
	USER="$1"
	encFilePath="$2"
	userKeyFile=$(pwd)/$USER.pKey.pem
	cd ../oc-data
	#echo "WD: $(pwd)"
	if [ ! -r "${USER}/$encFilePath" ]; then
		printErr "decryptFile():: File "${USER}/$encFilePath" does not exist or not enough permissions! Aborting."
		return 1
	fi
	if ! grep -q "^HBEGIN:" "${USER}/$encFilePath"; then
		printErr "decryptFile():: File "${USER}/$encFilePath" does not seem to be encrypted! Aborting."
		return 2
	fi
	printErr "decryptFile():: Started decryption of "${USER}/$encFilePath" .."
	# --- Get the FileKey ---
	## remove leading portion from string
	# ${string#$prefix}
	## remove trailing portion from string
	# ${string%$suffix}
	#userFileShareKeyPath="${USER}/files_encryption/keys/${encFilePath}/OC_DEFAULT_MODULE/${USER}.shareKey"
	#encFileKeyPath="${USER}/files_encryption/keys/${encFilePath}/OC_DEFAULT_MODULE/fileKey"
	userFileShareKeyPath="${USER}/files_encryption/keys/${encFilePath#files/}/${USER}.shareKey"
	encFileKeyPath="${USER}/files_encryption/keys/${encFilePath#files/}/fileKey"
	
	if [ ! -f "$userFileShareKeyPath" ]; then
		printErr "ShareKey not found: $userFileShareKeyPath. Aborting."
		return 4
	fi
	if [ ! -f "$encFileKeyPath" ]; then
		printErr "FileKey not found: $encFileKeyPath. Aborting."
		return 5
	fi

	decUserFileShareKeyHEX="$( openssl rsautl -decrypt -inkey $userKeyFile -in "$userFileShareKeyPath" |od -An -tx1 |tr -dc '[:xdigit:]' )"
	if [ -z "$decUserFileShareKeyHEX" ]; then
		printErr "decryptFile():: The User Private Key is not good. Are you sure your ownCloud User Login password is correct?"
		return 3
	fi

	decFileKeyContent="$( openssl rc4 -d -in "$encFileKeyPath" -iv 0 -K $decUserFileShareKeyHEX )"
	decFileKeyContentHEX="$( echo -n $decFileKeyContent |od -An -tx1 |tr -dc '[:xdigit:]' )"
	# --- Get the FileKey ---

	# --- Decrypt the file ---
	# TODO: to figure out how to speed-up the decryption process.
	#       bottlenecks:
	#        - awk is running really slow, consuming lot of CPU
	encFileContentsALL="$(cat "${USER}/$encFilePath")"
	encFileContentsNOHEAD=$(echo -n "$encFileContentsALL" | sed -r 's/^HBEGIN:.+:HEND-*//')
	N=0
	base64blocksFileName=$(mktemp)
	printErr " - Reading Payload"
	echo -n "$encFileContentsNOHEAD" | sed -r "s/00iv00.{16}xx/\n/g" > $base64blocksFileName
	numBlocks=$(wc -l < $base64blocksFileName)
	printErr " - Blockwise Decryption"
	for IV in $(echo -n "$encFileContentsNOHEAD" |LANG=C egrep -o '00iv00.{16}xx' |sed -r 's/^00iv00//;s/xx$//'); do
		N=$[N+1]
		echo -n " - Working $numBlocks Blocks:" $N $'\r'>&2
		#encFileContentsBASE64=$(echo -n "$encFileContentsNOHEAD" |awk -F '00iv00................xx' -v N=$N '{print $N}')
		encFileContentsBASE64=$(sed "${N}q;d" $base64blocksFileName)
		plainFileIVHEX=$(echo -n "$IV" |od -An -tx1 |tr -dc '[:xdigit:]')
		echo -n " - Decrypt $numBlocks Blocks:" $N $'\r'>&2
		openssl enc -AES-256-CFB -d -nosalt -base64 -A -K $decFileKeyContentHEX -iv $plainFileIVHEX -in <(echo "$encFileContentsBASE64")
		#php -r "echo openssl_decrypt('$encFileContentsBASE64', 'AES-256-CFB', '$decFileKeyContent', false, '$IV');"
	done
	printErr
	# --- Decrypt the file ---
	printErr "decryptFile():: Decryption of "${USER}/$encFilePath" finished."
}

if [ $# -gt 1 ]; then
	decryptFile "$1" "$2"
fi


